#!/usr/local/bin/python3
from os import listdir
from os.path import isfile, join
from androguard.core.bytecodes.dvm import APK, DalvikOdexVMFormat
from androguard.core import androconf

import pandas as pd
import multiprocessing
import logging
import psutil
import sys
import re
import io

# disable androguard's overwhelming logs and show only ERROR and higher level logs
logging.getLogger('androguard').setLevel(logging.ERROR)

apkpath = '../test/raw/'
dexpath = '../test/dex/'
mapping = '../Dataset/PermissionApiMapping/apmapping'

apk = []

# get list of files
if len(sys.argv) == 2:
    apk.append(sys.argv[1])
else:
    apk.extend([f for f in listdir(apkpath) if isfile(join(apkpath,f))])

# get permission api mapping
df = pd.read_csv(mapping)

def apkGetDex(i):

    # extracting apk content
    a = APK(join(apkpath,i))
    d = DalvikOdexVMFormat(a.get_dex())

    #open dex files
    fout = open(join(dexpath,i),'w')

    # network address extraction
    url = set()
    for _ in d.get_strings():
        URLSearch = re.search("http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+",_,re.IGNORECASE)
        if(URLSearch):
            URL = URLSearch.group()
            url.add(URL)
            Domain = re.sub("https?://(.*)", "\g<1>",re.search("https?://([^/:\\\\]*)", URL, re.IGNORECASE).group(), 0, re.IGNORECASE)
            url.add(Domain)
    if len(url): 
        fout.write('\n'.join(("url::"+_) for _ in url))
        fout.write("\n")

    # androguard io redirection from tty to python variable
    trap = io.StringIO()
    androconf.CONF['PRINT_FCT'] = trap.write
    sys.stdout = trap
    # dump androguard data
    d.show()
    # restore io 
    sys.stdout = sys.__stdout__
    androconf.CONF['PRINT_FCT'] = sys.stdout.write
    #extract instructions
    inst = set(re.findall("Landroid.*\-\>.*\(",trap.getvalue()))
    inst = inst.union(set(re.findall("Lcom.*\-\>.*\(",trap.getvalue())))
    inst = inst.union(set(re.findall("Ljava.*\-\>.*\(",trap.getvalue())))
    inst = inst.union(set(re.findall("Lorg.*\-\>.*\(",trap.getvalue())))
    instructions = set()
    for _ in inst:
        instructions.add(_[1:-1])

    # permission and ristricted api
    insList = list(instructions)
    ins = set()
    per = set()

    for x in insList:
        tmp = set(df[df['Api'] == x].Permission.tolist())
        if len(tmp):
            ins.add(x)
            per = per.union(tmp)

    for _ in ins:
        fout.write("restricted-api::"+_+"\n")
    for _ in per:
        fout.write("used-permission::"+_+"\n")

    # suspious api
    ## external exec
    exe = re.search("exec",trap.getvalue(),re.IGNORECASE)
    if(exe):
        fout.write("suspicious-api::Execution_of_external_command\n")
    ## native exec
    ndk = re.search("loadLibrary",trap.getvalue(),re.IGNORECASE)
    if(exe):
        fout.write("suspicious-api::Execution_of_native_command\n")
    ## http
    http = re.search("http",trap.getvalue(),re.IGNORECASE)
    if(http):
        fout.write("suspicious-api::network_communication\n")
    ## sms
    sms = re.search("sms",trap.getvalue(),re.IGNORECASE)
    if(sms):
        fout.write("suspicious-api::sms\n")
    ## system service
    ss = re.search("getSystemService",trap.getvalue(),re.IGNORECASE)
    if(ss):
        fout.write("suspicious-api::getSystemService\n")
    ## wifi
    wifi = re.search("Wifi",trap.getvalue(),re.IGNORECASE)
    if(wifi):
        fout.write("suspicious-api::wifi\n")
    ## print stack trace
    pst = re.search("printStackTrace",trap.getvalue(),re.IGNORECASE)
    if(pst):
        fout.write("suspicious-api::printStackTrace\n")
    ## base64
    b64 = re.search("base64",trap.getvalue(),re.IGNORECASE)
    if(b64):
        fout.write("suspicious-api::obfuscation\n")
    ## cipher
    cipher = re.search("Cipher",_,re.IGNORECASE)
    if(cipher):
        fout.write("suspicious-api::cipher\n")
    ## deviceID
    deviceid = re.search("deviceID",trap.getvalue(),re.IGNORECASE)
    if(deviceid):
        fout.write("suspicious-api::getDeviceId\n")
    ## subscriberID
    subscriberid = re.search("getSubscriberId",trap.getvalue(),re.IGNORECASE)
    if(subscriberid):
        fout.write("suspicious-api::getSubscriberId\n")
    ## getPackageInfo
    packageinfo = re.search("getPackageInfo",trap.getvalue(),re.IGNORECASE)
    if(packageinfo):
        fout.write("suspicious-api::getPackageInfo\n")
    ## getSimCountryIso
    sim = re.search("getSimCountryIso",trap.getvalue(),re.IGNORECASE)
    if(sim):
        fout.write("suspicious-api::getSimCountryIso\n")
    ## external file IO
    extio = re.search(("getExternal"|"setExternal"),trap.getvalue(),re.IGNORECASE)
    if(extio):
        fout.write("suspicious-api::external storage io\n")
    ## root
    root = re.search(r"\w*[Bb][Ii][Nn]\/[Ss][Uu]",trap.getvalue(),re.IGNORECASE)
    if(root):
        fout.write("suspicious-api::root\n")

    #close file
    fout.close()

# Multi-core
if __name__ == '__main__':
    pool = multiprocessing.Pool(processes=psutil.cpu_count())
    for i in apk:
        pool.apply_async(apkGetDex, args=(i,))
    pool.close()
    pool.join()
