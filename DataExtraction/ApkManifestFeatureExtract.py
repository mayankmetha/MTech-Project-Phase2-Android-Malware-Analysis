#!/usr/local/bin/python3
from os import listdir
from os.path import isfile, join
from androguard.misc import AnalyzeAPK
from xml.dom import minidom

import multiprocessing
import psutil
import logging
import sys

# disable androguard's overwhelming logs and show only ERROR and higher level logs
logging.getLogger('androguard').setLevel(logging.ERROR)

apkpath = '../test/raw/'
manifestpath = '../test/manifest/'
apk = []
# get list of files
if len(sys.argv) == 2:
    apk.append(sys.argv[1])
else:
    apk.extend([f for f in listdir(apkpath) if isfile(join(apkpath,f))])

# extract manifest for apk
def apkGetManifest(i):
    # variables
    hardware = set()
    permission = set()
    activity = set()
    service = set()
    receiver = set()
    provider = set()
    intentfilter = set()
    dom = None

    # extracting AndroidManifest.xml
    a,d,dx = AnalyzeAPK(join(apkpath,i))
    try:
        # axml
        dom = minidom.parseString(a.get_android_manifest_axml().get_xml())
    except:
        try:
            # xml
            dom = minidom.parseString(a.get_android_manifest_xml().get_xml())
        except Exception as e:
            print("e: "+i+" : Failed to extract Manifest from APK with error:\n"+e)
    
    # open manifest file
    fout = open(join(manifestpath,i),'w')
    domCollection = dom.documentElement

    # hardware feature extraction
    for _ in domCollection.getElementsByTagName("uses-feature"):
        if _.hasAttribute("android:name"):
            hardware.add(_.getAttribute("android:name"))
    if len(hardware): 
        fout.write('\n'.join(("hardware::"+_) for _ in hardware))
        fout.write("\n")
    
    # permission feature extraction
    for _ in domCollection.getElementsByTagName("uses-permission"):
        if _.hasAttribute("android:name"):
            permission.add(_.getAttribute("android:name"))
    if len(permission): 
        fout.write('\n'.join(("permission::"+_) for _ in permission))
        fout.write("\n")

    # activity feature extraction
    for _ in domCollection.getElementsByTagName("activity"):
        if _.hasAttribute("android:name"):
            activity.add(_.getAttribute("android:name"))
    if len(activity): 
        fout.write('\n'.join(("activity::"+_) for _ in activity))
        fout.write("\n")

    # service feature extraction
    for _ in domCollection.getElementsByTagName("service"):
        if _.hasAttribute("android:name"):
            service.add(_.getAttribute("android:name"))
    if len(service): 
        fout.write('\n'.join(("service::"+_) for _ in service))
        fout.write("\n")

    # receiver feature extraction
    for _ in domCollection.getElementsByTagName("receiver"):
        if _.hasAttribute("android:name"):
            receiver.add(_.getAttribute("android:name"))
    if len(receiver): 
        fout.write('\n'.join(("receiver::"+_) for _ in receiver))
        fout.write("\n")

    # provider feature extraction
    for _ in domCollection.getElementsByTagName("provider"):
        if _.hasAttribute("android:name"):
            provider.add(_.getAttribute("android:name"))
    if len(provider): 
        fout.write('\n'.join(("provider::"+_) for _ in provider))
        fout.write("\n")

    # intent-filter action & category feature extraction
    for _ in domCollection.getElementsByTagName("action"):
        if _.hasAttribute("android:name"):
            intentfilter.add(_.getAttribute("android:name"))
    for _ in dom.getElementsByTagName("category"):
        if _.hasAttribute("android:name"):
            intentfilter.add(_.getAttribute("android:name"))
    if len(intentfilter): 
        fout.write('\n'.join(("intent-filter::"+_) for _ in intentfilter))
        fout.write("\n")
    
    fout.close()

# Multi-core
if __name__ == '__main__':
    pool = multiprocessing.Pool(processes=psutil.cpu_count())
    for i in apk:
       pool.apply_async(apkGetManifest, args=(i,))
    pool.close()
    pool.join()