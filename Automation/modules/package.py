import xml.dom.minidom
import os
import shutil
import re

def remove_empty_dir(path):
    try:
        os.rmdir(path)
    except OSError:
        pass

def remove_empty_dirs(path):
    for (root, dirnames, filenames)in os.walk(path, topdown=False):
        for dirname in dirnames:
            remove_empty_dir(os.path.realpath(os.path.join(root, dirname)))

print("I: Removing blacklisted packages")
path = os.getcwd()+"/../../dump/"
filtersFolders = []
filterManifest = []
for f in open(os.getcwd()+"/../filters/blacklistPackages",'r').readlines():
    filtersFolders.append(f.replace(".","/").strip())
    filterManifest.append(f.strip())

for(dpath,dnames,fnames) in os.walk(path):
    if 'smali' in dnames:
        for _ in filtersFolders:
            if os.path.exists(dpath+"/smali/"+_):
                shutil.rmtree(dpath+"/smali/"+_)
                print("\tDeleted "+_)
            remove_empty_dirs(dpath+"/smali")
    if 'AndroidManifest.xml' in fnames and not dpath.endswith('original'):
        tree = xml.dom.minidom.parse(dpath+'/AndroidManifest.xml')
        for _ in tree.documentElement.getElementsByTagName("meta-data"):
            parent = _.parentNode
            parent.removeChild(_)
        for _ in tree.documentElement.getElementsByTagName("activity"):
            for f in filterManifest:
                if _.getAttribute("android:name").startswith(f):
                    parent = _.parentNode
                    parent.removeChild(_)
        for _ in tree.documentElement.getElementsByTagName("service"):
            for f in filterManifest:
                if _.getAttribute("android:name").startswith(f):
                    parent = _.parentNode
                    parent.removeChild(_)
        for _ in tree.documentElement.getElementsByTagName("receiver"):
            for f in filterManifest:
                if _.getAttribute("android:name").startswith(f):
                    parent = _.parentNode
                    parent.removeChild(_)
        for _ in tree.documentElement.getElementsByTagName("provider"):
            for f in filterManifest:
                if _.getAttribute("android:name").startswith(f):
                    parent = _.parentNode
                    parent.removeChild(_)
        f = open(dpath+'/AndroidManifest.xml','w')
        f.write(tree.toxml())
        f.close()